"""Run TXL to create the mutant programs.  Count the number of instances of
each and return the count in a list.
"""
import sys
import subprocess
import os
import os.path
import tempfile
import time

sys.path.append("..")  # To allow importing parent directory module
import config


# Input: 1, 17, DoSomething.java
# Output: Mutants by directory
def generate_all_mutants(generation, memberNum, fileName):
  # Loop over the selected operators in the config file
  for txlOpName in config._MUTATIONS_ENABLE:
    if config._MUTATIONS_ENABLE[txlOpName]:
      generate_mutants(generation, memberNum, fileName, txlOpName)
  time.sleep(0.5)  # Small delay to allow directories/files to form


# Input: 15, 39, JustDoIt.java, ASAS
# Output: Mutations of one TXL operator, all in one directory
def generate_mutants(generation, memberNum, fileName, txlOpName):
  # Look for a /temp/[generation]/[member]/[filename]/[txlopname]
  # directory.

  pathNoExt = os.path.splitext(fileName)[0]
  fileNameOnly = os.path.split(pathNoExt)[1]

  mutantDir = "".join([config._TMP_DIR, str(memberNum), os.sep,
                       str(generation), os.sep, fileNameOnly, os.sep,
                       txlOpName, os.sep])

  # print "generate_mutants mutantDir: {}".format(mutantDir)

  # If it doesn't exist, create it
  if not os.path.exists(mutantDir):
    os.makedirs(mutantDir)

  # If it exists, delete any files and subdirectories in it
  else:
    for aFile in os.listdir(mutantDir):
      fullPath = os.path.join(mutantDir, aFile)
      try:
        if os.path.isfile(fullPath):
          os.unlink(fullPath)
        if os.path.isdir(fullPath):
          for killFile in os.listdir(fullPath):
            killFullPath = os.path.join(fullPath, killFile)
            try:
              if os.path.isfile(killFullPath):
                os.unlink(killFullPath)
            except Exception, f:
              print f
          os.rmdir(fullPath)
      except Exception, e:
        print e

  # Start a TXL process to generate mutants in
  # /temp/[generation]/[member]/[OPNAME]
  pathNoExt = os.path.splitext(fileName)[0]
  fileNameOnly = os.path.split(pathNoExt)[1]
  fileExtOnly = os.path.splitext(fileName)[1]

  outFile = tempfile.SpooledTemporaryFile()
  errFile = tempfile.SpooledTemporaryFile()

  # print 'fileName: ', fileName
  # print 'txlOpName: ', txlOpName
  # print 'pathNoExt:', pathNoExt
  # print 'fileNameOnly: ', fileNameOnly
  # print 'fileExtOnly: ', fileExtOnly

  # print 'TXL command line: ' 
  # print ['txl', '-v', fileName, config._MUTATIONS_FILE[txlOpName], '-',
  #        '-outfile', fileNameOnly + txlOpName + fileExtOnly, '-outdir',
  #        mutantDir]

  process = subprocess.Popen(['txl', '-v', fileName,
                config._MUTATIONS_FILE[txlOpName], '-', '-outfile',
                fileNameOnly + txlOpName + fileExtOnly, '-outdir', mutantDir],
                stdout=outFile, stderr=errFile, cwd=config._PROJECT_DIR, 
                shell=False)


# Input: 1, 17, DoSomething.java, ASAS
# Output: Number of mutations generated by the operator
def count_mutants(generation, memberNum, fileName, txlOpName):
  # Look for a /temp/[generation]/[member]/[filename]/[txlopname]
  # directory.

  pathNoExt = os.path.splitext(fileName)[0]
  fileNameOnly = os.path.split(pathNoExt)[1]

  mutantDir = "".join([config._TMP_DIR, str(memberNum), os.sep,
                       str(generation), os.sep, fileNameOnly, os.sep,
                       txlOpName, os.sep])

  # print "count_mutants mutantDir: {}".format(mutantDir)

  if not os.path.exists(mutantDir):
    return -1

  numDirs = 0

  # Number of subdirectories
  for aFile in os.listdir(mutantDir):
    fullPath = os.path.join(mutantDir, aFile)
    try:
      if os.path.isdir(fullPath):
        numDirs = numDirs + 1
    except Exception, e:
      print e

  return numDirs

# Input: 1, 17, DoSomething.java
# Output: List of numer of mutations by type, eg:  [5, 3, 7, ...]
def generate_representation(generation, memberNum, fileName):
  rep = []
  # Loop over the selected operators in the config file
  for txlOpName in config._MUTATIONS_ENABLE:
    if config._MUTATIONS_ENABLE[txlOpName]:
      rep.append(count_mutants(generation, memberNum, fileName, txlOpName))

  return rep

# Input: None
# Output: None
def main():
  testProg = config._PROJECT_SRC_DIR + 'DeadlockDemo.java'
  generate_all_mutants(1, 1, testProg)

  muties = []
  muties = generate_representation(1, 1, testProg)

  print 'Mutant numbers:'
  for i, v in enumerate(muties):
    print v #muties[i]

if __name__ == "__main__":
  sys.exit(main())
