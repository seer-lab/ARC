"""Run TXL to create the mutant programs.  Count the number of instances of
each and return the count in a list.
"""
import sys
import subprocess
import os
import os.path
import tempfile
import time
import shutil

sys.path.append("..")  # To allow importing parent directory module
import config

# -----------------------------------------------------------------------------------------------
#
# Mutant related functions 
#
# -----------------------------------------------------------------------------------------------


# Input : /project/directory/, 42, 5
# Output: Mutants for every java file in the project
def mutate_project(projectDir, generation, memberNum):

  for root, dirs, files in os.walk(projectDir):
    for aDir in dirs:
      mutate_project(aDir, generation, memberNum)
    for aFile in files:
      fName = os.path.join(root, aFile)
      #print 'fName: ' + fName
      generate_all_mutants(generation, memberNum, fName)


# Input : 1, 17, DoSomething.java
# Output: Mutants by directory
def generate_all_mutants(generation, memberNum, fileName):
  # Loop over the selected operators in the config file
  for operator in config._MUTATIONS:
    if operator[1]:
      generate_mutants(generation, memberNum, fileName, operator)
  time.sleep(0.5)  # Small delay to allow directories/files to form


# Input : 15, 39, JustDoIt.java, ASAS
# Output: Mutations of one TXL operator, all in one directory
def generate_mutants(generation, memberNum, fileName, txlOperator):

  # Start a TXL process to generate mutants in
  # /temp/[generation]/[member]/[OPNAME]

  pathNoExt = os.path.splitext(fileName)[0]
  pathNoFileName = os.path.split(pathNoExt)[0]
  if ((pathNoFileName + '/') != config._PROJECT_SRC_DIR):
    relPath = pathNoFileName.replace(config._PROJECT_SRC_DIR, '')
  else:
    relPath = ''
  fileNameOnly = os.path.split(pathNoExt)[1]
  fileExtOnly = os.path.splitext(fileName)[1]
  pathNoExt = os.path.splitext(fileName)[0]
  fileNameOnly = os.path.split(pathNoExt)[1]

  mutantDir = "".join([config._TMP_DIR, str(generation), os.sep, str(memberNum), os.sep, relPath, os.sep, fileNameOnly, os.sep, txlOperator[0], os.sep])

  #print '---------------------------'
  #print 'fileName:       ' + fileName
  #print 'txlOperator:    ' + txlOperator[0]
  #print 'pathNoExt:      ' + pathNoExt
  #print 'pathNoFileName: ' + pathNoFileName
  #print 'relPath:        ' + relPath
  #print 'fileNameOnly:   ' + fileNameOnly
  #print 'fileExtOnly:    ' + fileExtOnly
  #print "mutantDir:      " + mutantDir

  # If it doesn't exist, create it
  if not os.path.exists(mutantDir):
    os.makedirs(mutantDir)

  # If it exists, delete any files and subdirectories in it
  else:
    for aFile in os.listdir(mutantDir):
      fullPath = os.path.join(mutantDir, aFile)
      try:
        if os.path.isfile(fullPath):
          os.unlink(fullPath)
        if os.path.isdir(fullPath):
          for killFile in os.listdir(fullPath):
            killFullPath = os.path.join(fullPath, killFile)
            try:
              if os.path.isfile(killFullPath):
                os.unlink(killFullPath)
            except Exception, f:
              print f
          os.rmdir(fullPath)
      except Exception, e:
        print e

  outFile = tempfile.SpooledTemporaryFile()
  errFile = tempfile.SpooledTemporaryFile()

  #print 'TXL command line: '
  #print ['txl', '-v', fileName, txlOperator[6], '-', '-outfile', fileNameOnly + txlOperator[0] + fileExtOnly, '-outdir', mutantDir]

  process = subprocess.Popen(['txl', '-v', fileName, txlOperator[6], '-', '-outfile', fileNameOnly + fileExtOnly, '-outdir', mutantDir], stdout=outFile, stderr=errFile, cwd=config._PROJECT_DIR, shell=False)


# Input : 1, 17, DoSomething.java, ASAS
# Output: Number of mutations generated by the operator
def count_mutants(generation, memberNum, fileName, txlOpName):
  # Look for a /temp/[generation]/[member]/[filename]/[txlopname]
  # directory.

  pathNoExt = os.path.splitext(fileName)[0]
  fileNameOnly = os.path.split(pathNoExt)[1]
  pathNoFileName = os.path.split(pathNoExt)[0]
  if ((pathNoFileName + '/') != config._PROJECT_SRC_DIR):
    relPath = pathNoFileName.replace(config._PROJECT_SRC_DIR, '')
  else:
    relPath = ''

  mutantDir = "".join([config._TMP_DIR, str(generation), os.sep, str(memberNum), os.sep, relPath, os.sep, fileNameOnly, os.sep, txlOpName, os.sep])

  # print "count_mutants mutantDir: {}".format(mutantDir)

  if not os.path.exists(mutantDir):
    return -1

  numDirs = 0

  # Number of subdirectories
  for aFile in os.listdir(mutantDir):
    fullPath = os.path.join(mutantDir, aFile)
    try:
      if os.path.isdir(fullPath):
        numDirs = numDirs + 1
    except Exception, e:
      print e

  return numDirs

# Input : 1, 17, DoSomething.java
# Output: List of numer of mutations by type, eg:  [5, 3, 7, ...]
def generate_representation(generation, memberNum, fileName):
  rep = []
  # Loop over the selected operators in the config file
  for operator in config._MUTATIONS:
    if operator[1]:
      rep.append(count_mutants(generation, memberNum, fileName, operator[0]))

  return rep

# -----------------------------------------------------------------------------------------------
#
# Project related functions 
#
# -----------------------------------------------------------------------------------------------


# Input : Directory of project to save (Once ARC begins)
# Output: Remote pristine project is backed up into ARC
def backup_project(startDir):

  for root, dirs, files in os.walk(startDir):
    for aDir in dirs:
      backup_project(aDir)
    for aFile in files:
      fName = os.path.join(root, aFile)
      pathNoFileName = os.path.split(fName)[0]
      #print 'bp fName:           ' + fName
      #print 'bp pathNoFileName   ' + pathNoFileName
      if ((pathNoFileName + '/') != startDir):
        relPath = pathNoFileName.replace(startDir, '')
      else:
        relPath = ''

      dst = config._PROJECT_BACKUP_DIR + relPath + os.sep

      if not os.path.exists(dst):
        os.makedirs(dst)

      shutil.copy(fName, dst)


# Input : Directory of project to restore (Once ARC has completed)
# Output: Pristine project stored in ARC is restored to it's directory
def restore_project(startDir):

  for root, dirs, files in os.walk(startDir + os.sep):
    for aDir in dirs:
      restore_project(aDir)
    for aFile in files:
      fName = os.path.join(root, aFile).replace(os.sep + os.sep, os.sep)
      pathNoFileName = os.path.split(fName)[0]
      if ((pathNoFileName + os.sep) != startDir):
        relPath = pathNoFileName.replace(startDir, '') + os.sep
      else:
        relPath = ''

      dst = config._PROJECT_DIR + relPath

      #print 'resto_p   root:    ' + root
      #print 'resto_p   aFile:   ' + aFile
      #print 'resto_p   fName:   ' + fName
      #print 'resto_p   relPath: ' + relPath
      #print 'resto_p   dst:     ' + dst

      if not os.path.exists(dst):
        os.makedirs(dst)

      shutil.copy(fName, dst)


# Input : 1, 16, MyFile.java, ASAS, 2
# Output: Copy a mutant file in to the local project for this generation and member
def move_mutant_to_local_project(generation, memberNum, fileName, txlOperator, mutantNum):

  pathNoExt = os.path.splitext(fileName)[0]
  pathNoFileName = os.path.split(pathNoExt)[0]
  if ((pathNoFileName + '/') != config._TMP_DIR):
    relPath = pathNoFileName.replace(config._TMP_DIR, '') + os.sep
  else:
    relPath = ''
  fileNameOnly = os.path.split(pathNoExt)[1]
  fileExtOnly = os.path.splitext(fileName)[1]

  #projectTitle = os.path.split(config._PROJECT_DIR)[1]

  mutDir = txlOperator + '_' + fileNameOnly + fileExtOnly + '_' + str(mutantNum)

  src = "".join([config._TMP_DIR, str(generation), os.sep, str(memberNum), os.sep, relPath, os.sep, fileNameOnly, os.sep, txlOperator, os.sep, mutDir, os.sep, fileNameOnly + fileExtOnly])

  dst = config._TMP_DIR + str(generation) + os.sep + str(memberNum) + os.sep + 'project' + relPath 

  if not os.path.exists(dst):
    os.makedirs(dst)

  dst2 = dst + fileNameOnly + fileExtOnly

  shutil.copy(src, dst2)


# Input : 1, 7, \1\7\project\
#         (Be sure to back up the original project first!)
# Output: Files in original project overwritten
def move_local_project_to_original(generation, memberNum, mutantDir):

  # Check for existence of a backup
  if len([item for item in os.listdir(config._PROJECT_BACKUP_DIR) if os.path.isfile(item)]) == 0:
    print '[ERROR] txl_operator.move_local_project_to_original: config._PROJECT_BACKUP_DIR is empty.  No backup means original files could be lost.  Move not completed.'
    return

  #projectTitle = os.path.split(config._PROJECT_DIR)[1]

  for root, dirs, files in os.walk(mutantDir):
    for aDir in dirs:
      move_local_project_to_original(generation, memberNum, aDir)
    for aFile in files:
      fName = os.path.join(root, aFile)
      pathNoFileName = os.path.split(fName)[0]
      if ((pathNoFileName + '/') != mutantDir):
        relPath = pathNoFileName.replace(mutantDir, '') + os.sep 
      else:
        relPath = ''

      dst = config._PROJECT_SRC_DIR + relPath + aFile

      #print 'to_orig   fName:   ' + fName
      #print 'to_orig   relPath: ' + relPath
      #print 'to_orig   dst:     ' + dst

      if not os.path.exists(dst):
        os.makedirs(dst)

      shutil.copy(fName, dst)

# Input : Look for an Ant build.xml in the project directory (ant.apache.org)
# Output: Run build.xml if it is found. 'ant compile' and 'ant build' are tried  
def compile_project():

  os.chdir(config._PROJECT_DIR)
  
  if not os.path.isfile(config._PROJECT_DIR + 'build.xml'):
    print '[ERROR] txl_operator.compile_project: Ant build.xml not found in root directory.  Project wasn\'t compiled.'
  else:
    outFile = tempfile.SpooledTemporaryFile()
    errFile = tempfile.SpooledTemporaryFile()
    
    # Hackish: One of these calls should succeed
    antProcess = subprocess.Popen(['ant', 'compile'], stdout=outFile, stderr=errFile, cwd=config._PROJECT_DIR, shell=False)    
    antProcess = subprocess.Popen(['ant', 'build'], stdout=outFile, stderr=errFile, cwd=config._PROJECT_DIR, shell=False)    


# ------------------------------------------------------------------------------------------------
#
# Main
#
# ------------------------------------------------------------------------------------------------

# Input: None
# Output: None
def main():
  gener = 1
  member = 4

  backup_project(config._PROJECT_DIR)
  restore_project(config._PROJECT_BACKUP_DIR)

  # For generation 1 we take the source from the project directory
  # afterwards, we draw the mutated source from a local directory.
  # (We never alter the original source files.)
  if (gener == 1):
    testProj = config._PROJECT_SRC_DIR
  else:
    testProj = config._TMP_DIR + os.sep + gener + os.sep + member + os.sep + 'src' + os.sep

  mutate_project(testProj, gener, member)

  # Create the representation of a file (The array of numbers of mutants by type)
  testFile = config._PROJECT_SRC_DIR + 'DeadlockDemo.java'
  muties = []
  muties = generate_representation(gener, member, testFile)

  print 'Mutant numbers:'
  for i, v in enumerate(muties):
    print v #muties[i]

  #move_mutant_to_local_project(1, 4, 'DeadlockDemo.java', 'ASAS', 3)

  #  mutatedProject = config._TMP_DIR + str(gener) + os.sep + str(member) + os.sep + 'project' + os.sep
  #move_local_project_to_original(1, 4, mutatedProject)

if __name__ == "__main__":
  sys.exit(main())
