"""Run TXL to create the mutant programs.  Count the number of instances of each and return the count in a list.

"""

import sys
import subprocess
import os
import os.path
import timeit
import tempfile

import config

# Input: 1, 17, DoSomething.java
# Output: Mutants by directory
def generate_all_mutants(self, generation, memberNum, fileName):
	# Loop over the selected operators in the config file
      	for i in config._MUTATIONS_ENABLE:	
		if i[1]:
			generate_mutants(generation, memberNum, fileName, i[0])

# Input: 15, 39, JustDoIt.java, ASAS
# Output: Mutations of one TXL operator, all in one directory
def generate_mutants(self, generation, memberNum, fileName, txlOpName):
	# Look for a /temp/[generation]/[member]/[filename]/[txlopname] 
        # directory.  

	# TODO: os.pathseparator or similar
	mutantDir = config._PROJECT_TEMP_DIR + memberNum + '/' + generation + '/'  + fileName + "/" + txlOpName + "/"

        # If it doesn't exist, create it
	if not exists(mutantDir):
		makedirs(mutantDir)
        # If it exists, delete any files and subdirectories in it
	else:
		for aFile in os.listdir(mutantDir):
    			fullPath = os.path.join(mutantDir, aFile)
    			try:
        			if os.path.isfile(fullPath):
            				os.unlink(fullPath)
    			except Exception, e:
        			print e
		
        # Start a TXL process to generate mutants in 
        # /temp/[generation]/[member]/[OPNAME]
	fileNameOnly = splitext(fileName)[0]
	fileExtOnly = splitext(fileName)[1]

        process = subprocess.Popen(['txl', '-v', fileName, txlOpName, 
                '- -outfile', fileNameOnly + txlNameOpName + '.' 
		+ fileExtOnly, '-outdir', './{}/'.format(fileNameOnly)], 
                stdout=outFile, stderr=errFile, cwd=config._PROJECT_DIR, 
		shell=False)



# Input: 1, 17, DoSomething.java, ASAS
# Output: Number of mutations generated by the operator      
def count_mutants(self, generation, memberNum, fileName, txlOpName):
	# Look for a /temp/[generation]/[member]/[filename]/[txlopname] 
        # directory.  
	mutantDir = config._PROJECT_TEMP_DIR + memberNum + '/' + "/" + generation + '/'  + fileName + "/" + txlOpName + "/"

	if not exists(mutantDir):
		return -1;

	# Number of subdirectories
	return len(os.walk(mutantDir)[1])
	
# Input: 1, 17, DoSomething.java
# Output: List of numer of mutations by type
# eg:  [5, 3, 7, ...]
def generate_representation(self, generation, memberNum, fileName):
	rep = []
	# Loop over the selected operators in the config file
      	for i in config._MUTATIONS_ENABLE:	
		if i[1]:
			rep.append(generate_rep_line(generation, memberNum, fileName, i[0]))

	return rep

# Input: 1, 17, DoSomething.java, ASAS
# Output: One line of 0s for generate_representation
def generate_rep_line(self, generation, memberNum, fileName, txlOpName):
	# Look for a /temp/[generation]/[member]/[filename]/[txlopname] 
        # directory.  
	mutantDir = config._PROJECT_TEMP_DIR + memberNum + '/' + "/" + generation + '/'  + fileName + "/" + txlOpName + "/"

	zeroStr = ''

	# Number of subdirectories
	for i in range(1, len(os.walk(mutantDir)[1]) + 1):
		zeroStr.append('0');

	return zeroStr		


