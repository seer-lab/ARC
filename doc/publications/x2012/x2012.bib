@article{LSW05,
author = {Long, Brad and Strooper, Paul and Wildman, Luke},
journal = {Concurrency and Computation: Practice and Experience},
number = {3},
pages = {281--294},
title = {{A method for verifying concurrent {Java} components based on an analysis of concurrency failures}},
volume = {19},
year = {2007}
}


@inproceedings{FNWG09,
author = {Forrest, Stephanie and Nguyen, ThanhVu and Weimer, Westley and Goues, Claire Le},
booktitle = {Proc. of Genetic And Evolutionary Computation Conf. (GECCO 2009)},
pages = {947--954},
title = {{A genetic programming approach to automated software repair}},
year = {2009}
}

@inproceedings{AY08,
author = {Arcuri, Andrea and Yao, Xin},
booktitle = {Proc. of IEEE Congress on Evolutionary Computation (CEC 2008)},
pages = {162--168},
title = {{A novel co-evolutionary approach to automatic software bug fixing}},
year = {2008}
}

@inproceedings{Arc08,
author = {Arcuri, Andrea},
booktitle = {Proc. of Int. Conf. on Soft. Eng. (ICSE 2008)},
pages = {1003--1006},
title = {{On the automation of fixing software bugs}},
year = {2008}
}

@inproceedings{Har+10,
author = {Harman, M},
booktitle = {Proc. of 13th Int. Conf. on Fundamental Approaches to Soft. Eng. (FASE 2010)},
pages = {1--12},
title = {{Why the Virtual Nature of Software Makes it Ideal for Search Based Optimization}},
year = {2010}
}

@article{Har10,
author = {Harman, Mark},
journal = {Communications of the ACM},
month = may,
number = {5},
title = {{Automated patching techniques: the fix is in: technical perspective}},
volume = {53},
year = {2010}
}

@inproceedings{KLT+07,
author = {Krena, Bohuslav and Letko, Zdenek and Tzoref-Brill, Rachel and Ur, Shmuel and Vojnar, Tomas},
booktitle = {Proc. of 5th Int. Works. on Parallel and Distributed Systems: Testing, Analysis, and Debugging (PADTAD'07)},
pages = {54--64},
title = {{Healing Data Races On-The-Fly}},
year = {2007}
}

@inproceedings{LVK08,
author = {Letko, Zdenek and Vojnar, Tomas and Krena, Bohuslav},
booktitle = {Proc. of 6th Int. Works. on Parallel and Distributed Systems: Testing, Analysis, and Debugging (PADTAD'08)},
pages = {1--10},
title = {{AtomRace: Data Race and Atomicity Violation Detector and Healer}},
year = {2008}
}

@inproceedings{WT10,
author = {Wilkerson, Josh L. and Tauritz, Daniel},
booktitle = {Proc. of Genetic And Evolutionary Computation Conf. (GECCO 2010)},
pages = {1391--1392},
title = {{Coevolutionary automated software correction}},
year = {2010}
}

@inproceedings{WNLF09,
author = {Weimer, Westley and Nguyen, ThanhVu and {Le Goues}, Claire and Forrest, Stephanie},
booktitle = {Proc. of 31st Int. Conf. on Soft. Eng. (ICSE 2009)},
pages = {364--374},
title = {{Automatically finding patches using genetic programming}},
year = {2009}
}

@article{WFGN10,
author = {Weimer, Westley and Forrest, Stephanie and Goues, Claire Le and Nguyen, ThanhVu},
journal = {Communications of the ACM},
month = may,
number = {5},
title = {{Automatic program repair with evolutionary computation}},
volume = {53},
year = {2010}
}

@inproceedings{NWLF09,
author = {Nguyen, ThanhVu and Weimer, Westley and {Le Goues}, Claire and Forrest, Stephanie},
booktitle = {Proc. of 2nd Int. Works. on Search-Based Soft. Testing (SBST 2009)},
pages = {152--153},
title = {{Using Execution Paths to Evolve Software Patches}},
year = {2009}
}

@article{EFN+02,
author = {Edelstein, Orit and Farchi, Eitan and Nir, Yarden and Ratsaby, Gil and Ur, Shmuel},
journal = {IBM Systems Journal},
number = {1},
pages = {111--125},
title = {Multithreaded {Java} program test generation.},
volume = {41},
year = {2002}
}

@article{AY07, 
title={Model and Program Repair via SAT Solving}, 
url={http://arxiv.org/abs/0710.3332}, 
author={Attie, Paul C and Saklawi, Jad}, 
year={2007}, 
pages={29}
}

@article{LSW07,
 author = {Long, Brad and Strooper, Paul and Wildman, Luke},
 journal = {Concurrency and Computation: Practice \& Experience - Parallel and Distributed Systems: Testing and Debugging (PADTAD)},
 month = mar,
 number = {3},
 pages = {281--294},
 title = {{A method for verifying concurrent Java components based on an analysis of concurrency failures}},
 volume = {19},
 year = {2007}
}


@inproceedings{NA07,
 author = {Naik, Mayur and Aiken, Alex},
 booktitle = {POPL '07 Proceedings of the 34th annual ACM SIGPLAN-SIGACT symposium on Principles of programming languages},
 month = jan,
 number = {1},
 pages = {327--338},
 publisher = {ACM},
 title = {{Conditional must not aliasing for static race detection}},
 volume = {42},
 year = {2007}
}

@inproceedings{NPSG09,
 author = {Naik, Mayur and Park, Chang-Seo and Sen, Koushik and Gay, David},
 booktitle = {IEEE 31st International Conference on Software Engineering, 2009. ICSE 2009},
 pages = {386--396},
 publisher = {IEEE},
 title = {{Effective static deadlock detection}},
 year = {2009}
}

@article{HP04,
 author = {Hovemeyer, David and Pugh, William},
 journal = {ACM SIGPLAN Notices},
 month = dec,
 number = {12},
 pages = {92--106},
 title = {{Finding bugs is easy}},
 volume = {39},
 year = {2004}
}

@inproceedings{JNPS09,
 author = {Joshi, Pallavi and Naik, Mayur and Park, C.S. and Sen, Koushik},
 booktitle = {Proc. 21st International Conference on Computer Aided Verification (CAV'09)},
 pages = {675--681},
 publisher = {Springer},
 title = {{Calfuzzer: An extensible active testing framework for concurrent programs}},
 year = {2009}
}


@inproceedings{,
 author = {Bradbury, Jeremy S and Jalbert, Kevin},
 booktitle = {Proc. of the 3rd International Workshop on Software Patterns and Quality (SPAQu'09)},
 pages = {6--11},
 title = {{Defining a Catalog of Programming Anti-Patterns for Concurrent Java}},
 year = {2009}
}

@article{SL05,
 author = {Sutter, Herb and Larus, James},
 journal = {Queue},
 number = {7},
 pages = {54--62},
 publisher = {ACM},
 title = {{Software and the concurrency revolution}},
 volume = {3},
 year = {2005}
}

@article{CHP91,
 author = {Cordy, J.R. and Halpern-Hamu, C.D. and Promislow, E.},
 journal = {Computer Languages},
 number = {1},
 pages = {97--107},
 publisher = {Elsevier},
 title = {{TXL: A rapid prototyping system for programming language dialects}},
 volume = {16},
 year = {1991}
}

@inproceedings{RTI02,
 author = {{Research Triangle Institute}},
 booktitle = {Program Office Strategic Planning and Economic Group},
 month = may,
 pages = {309},
 publisher = {National Institute of Standards and Technology},
 title = {{The Economic Impacts of Inadequate Infrastructure for Software Testing. Planning Report 02-3}},
 year = {2002}
}

@inproceedings{CM08,
 author = {Chen, Jun and MacDonald, Steve},
 booktitle = {Proc. of the 6th workshop on Parallel and distributed systems (PADTAD '08)},
 pages = {1--9},
 publisher = {ACM},
 title = {{Towards a better collaboration of static and dynamic analyses for testing concurrent programs}},
 year = {2008}
}

@article{EHSU06,
 author = {Eytani, Yaniv and Havelund, Klaus and Stoller, Scott D and Ur, Shmuel},
 journal = {Concurrency and Computation: Practice \& Experience},
 number = {3},
 pages = {267--279},
 title = {{Toward a Framework and Benchmark for Testing Tools for Multi-Threaded Programs}},
 volume = {19},
 year = {2006}
}

@inproceedings{RM09,
 author = {Rungta, Neha and Mercer, Eric G.},
 booktitle = {Proceedings of the 7th Workshop on Parallel and Distributed Systems Testing,
        Analysis, and Debugging - PADTAD '09}, 
 pages = {1--10},
 publisher = {ACM Press},
 title = {{Clash of the Titans: Tools and Techniques for Hunting Bugs in Concurrent Programs}},
 year = {2009}
}

@inproceedings{KLVU10,
 author = {KÅ™ena, Bohuslav and Letko, Zden\v{e}k and Vojnar, Tom\'{a}\v{s} and Ur, Shmuel},
 booktitle = {Proceedings of the 8th Workshop on Parallel and Distributed Systems Testing,
        Analysis, and Debugging - PADTAD '10},
 pages = {48--58},
 publisher = {ACM Press},
 title = {{A platform for search-based testing of concurrent software}},
 year = {2010}
}

@inproceedings{HSU03,
 author = {Havelund, Klaus and Stoller, Scott D and Ur, Shmuel}, 
 booktitle = {Proc. of the 17th International Symposium on Parallel and Distributed Processing
        (IPDPS '03)}, 
 pages = {1--8},
 publisher = {IEEE Computer Society},
 title = {{Benchmark and Framework for Encouraging Research on Multi-Threaded Testing Tools}}, 
 year = {2003}, 
 annote = {This paper brings the formal need of a concurrency benchmark into view. There are
        various forms of testing for concurrency that fall into the dynamic and static analysis areas.
        The problem is when a new tool is introduced how is it actually compared so that the benefits of
        it relative to pre-exiting tools? It is also a known fact that the combination of various
        analysis can improve the detection of errors in software. This paper concludes that there needs
        to be a process to aid in the evaluation of concurrency error detection and testing tools. 
        \\ \\
        This paper is quite useful in the sense of providing a quick overview on the existing techniques
        that exist for error detection and testing of concurrent software. The need for a common benchmark
        is is well known, and there has been some attempts at filling this. The only problem is that the
        subjects in this benchmark have to be a representative of the concurrency software population,
        which is the challenging part. This also raises the issue of a model checking benchmark, is such
        a benchmark?}
}


@inproceedings{RDH03,
 author = {Robby and Dwyer, Matthew B. and Hatcliff, John},
 booktitle = {Proceedings of the 9th European software engineering conference held jointly with
        10th ACM SIGSOFT international symposium on Foundations of software engineering - ESEC/FSE '03},
 number = {5}, 
 pages = {267--276},
 publisher = {ACM Press},
 title = {{Bogor: an extensible and highly-modular software model checking framework}},
 volume = {28},
 year = {2003},
 annote = {This paper raises the point that model checking is useful, though the complexity of
        model checking domain knowledge is high. The proposed solution is to build a new model checking
        framework that can analyze various software-related models. Various challenges are noted to
        explain why it is difficult to model check a broad range of software artifacts. The proposed
        tool Bogor attempts to address these challenges, and is capable of handling concurrency. The
        architecture is described in great detail to promote additional plug-in development and
        extensions. The tool is capable of creating models quickly due to the state-space reduction
        techniques used. 
        \\ \\
        This paper explain with great detail the challenges of building a model checking framework that
        is capable of handling various types of software models\artifacts. It is useful to be aware of
        these challenges, as well as possible solutions to these problems. This paper also provides some
        background knowledge presents on well known tools in the model checking community.} 
}

@inproceedings{HP00,
 author = {Havelund, Klaus and Pressburger, Thomas},
 booktitle = {International Journal on Software Tools for Technology Transfer (STTT)},
 number = {4},
 pages = {366--381},
 title = {{Model checking Java programs using Java PathFinder}},
 volume = {2},
 year = {2000},
 annote = {This paper presents a new translator that converts Java source code to Promela modeling
        language code. This translator is called Java PathFinder and born from the idea of NASA using
        model checking on their mission-critical software. Java PathFinder would perform the
        transformation and the resulting Promela code would be evaluated by the model checker SPIN. By
        allowing the model checking to occur straight from the source code, model checking can used more
        widely. The correctness of the translator was assessed by seeding faults into a concurrent
        example, which was then discovered by Java PathFinder. 
        \\ \\
        This paper introduces Java PathFinder which is a very popular model checker in the research
        community. The tool described in this paper is of the earlier version of Java PathFinder. It is
        interesting to see the evolution, motivation and design rational for this tool. The paper
        presents a nice example which explains in great detail how this translation works. The concept of
        translating a modern programming language into a modeling language is great as it proves it can
        be done to other languages.} 
}

@inproceedings{BHPV00,
 author = {Brat, Guillaume and Havelund, Klaus and Park, Seungjoon and Visser, Willem},
 booktitle = {Proceedings of the Workshop on Advances in Verification},
 pages = {7},
 title = {{Java PathFinder - A second generation of a Java model checker}},
 year = {2000},
 annote = {This paper is the follow up to another paper on Java PathFinder, which introduces the
        earlier version of this tool. This new version now runs entirely on its own within Java, as it use
        to perform a transformation into Promela which then was evaluated by the SPIN model checker. This
        version of JPF operated directly on the Java bytecode, which allows for all of the features of
        Java to be understood. This is implemented by using a modified version of the Java Virtual
        Machine to perform the model checking. Java PathFinder is built using static and dynamic analysis
        tools to help catch data races and deadlocks in concurrency code. There is planned work to
        incorporate more search algorithms and extensions into this tool.
        \\ \\
        This paper shows the improvements over the previous version of Java PathFinder. The concerns of
        how the language could not be fully modeled in the previous version discourage the use of a
        translation. The solution to this was bytecode, which is quite interesting since Java PathFinder
        is now fully contained within Java. The description of the algorithms and the components that
        Java PathFinder use is noteworthy, as well as the future work which is to optimize by improving
        the abstraction and slicing efforts to reduce the number of states required to explore. } 
}

@inproceedings{JM04,
 author = {Jones, Michael and Mercer, Eric G.},
 booktitle = {In International SPIN Workshop on Software Model Checking (SPINâ€™04)},
 pages = {146--150},
 publisher = {Springer Berlin / Heidelberg},
 title = {{Explicit state model checking with Hopper}},
 year = {2004},
 annote = {This paper presents the Hopper model checking tool. It is built on top of Mur$\varphi$
        which is an older style model checker that operates at a lower level. The contributions of this
        tool is to extend the functionality of the Mur$\varphi$ tool as well as to make use of a randomized
        guided search algorithm executed in parallel. Hopper also includes a visualization toolkit to
        illustrate the analysis of the model. This randomized guided search only randomizes a set of the
        top priority states to explore. This limits the problem of state exploration, while still
        exploring more of the state-space randomly. This search algorithm proves to be successful in
        reducing the number of transitions need to find an error.
        \\ \\
        This paper exposes another model checking tool, one which builds off of another tool. This
        extension process is encouraging as it shows that there is promise in expanding on existing tools
        within the model checking community. The randomized guided search algorithm that was presented is
        quite unique as it is randomizing only the top selection of the priority queue of next states.
        This effectively reduces the number of states while retaining the guided search.} 
}

@techreport{MQB07,
 author = {Musuvathi, Madanlal and Qadeer, Shaz and Ball, Thomas},
 institution = {Microsoft Research},
 pages = {16},
 publisher = {Microsoft Research},
 title = {{CHESS: A Systematic Testing Tool for Concurrent Software}},
 year = {2007},
 annote = {This paper presents a new type of testing tool for concurrent software, it is called
        CHESS. This tool operates in a systematic way to explore thread interleavings while checking for
        any violations, data races and deadlocks that can occur. CHESS uses stateless search techniques,
        it actually does not cache the states visited. This techniques allowed CHESS to be ran on
        large system and was able to identify various concurrency related bugs.
        \\ \\
        CHESS is a stateless model checkers which is quite different from traditional model checkers in
        the area of concurrency testing. This approach presents various benefits to the search since it
        is not hindered by keeping track of the states. The only problem is the reduction in verification
        of the bug, states allow for much better replay in model checking. The techniques and rationals
        on their implementation for the stateless model checker is noteworthy.}
}

@inproceedings{OM03,
 author = {Owen, David and Menzies, Tim},
 booktitle = {Proc. of the 15th International Conference on Software Engineering \& Knowledge 
        Engineering (SEKE 2003)}, pages = {158--165},
 title = {{Lurch: a Lightweight Alternative to Model Checking}},
 year = {2003},
 annote = {This paper presents a lightweight alternative to model checking, in a form of a tool
        called Lurch. Lurch uses a technique to only randomly explore the easy states of a model. The
        idea behind this is that a formal model actually contains funnels of actual variables that
        influence the model. By focusing around these funnels the easy states of the model can be
        translated into an AND-OR graph that can be evaluated by Lurch. The results are promising as the
        resources consumed are smaller then existing model checkers, though there is a possibility of
        missing an error. 
        \\ \\
        Given the common problem of resource consumption in model checking, a lightweight alternative is
        well needed. The idea that Lurch presents is quite interesting, basically focusing the search of
        the model to a subset and then randomly search this reduced focused model. It would be interesting
        to see it used in more of a concurrency bug detection experiment.}
}


@article{Holz97,
 author = {Holzmann, Gerard J.},
 journal = {IEEE Transactions on Software Engineering},
 month = may,
 number = {5},
 pages = {279--295},
 title = {{The model checker SPIN}},
 volume = {23},
 year = {1997}
}


